@page "/addmedicationreminder"
@using HealthcareManagementSystem.App.Contracts
@using HealthcareManagementSystem.App.ViewModels
<h3>CreateMedicationReminder</h3>

<EditForm Model="@MedicationReminderViewModel" OnValidSubmit="@HandleValidSubmit">

	<DataAnnotationsValidator />
	<ValidationSummary></ValidationSummary>

    <div>
        @* <div class="col-md-4 mb-3">
            <label for="userId">User ID</label>
            <InputText id="userId" class="form-control" @bind-Value="@UserId" placeholder="Enter user id"></InputText>
            <ValidationMessage For="@(() => MedicationReminderViewModel.UserId)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
        </div> *@

        <InputSelect @bind-Value="@Medications" @bind-Index="@selectedMedicationIndex">
            @foreach (var medication in Medications)
            {
                <option value="@medication.Name">@medication.Name</option>
            }
        </InputSelect>

        <div class="col-md-4 mb-3">
            <label for="dosage">Dosage</label>
            <InputNumber id="dosage" class="form-control" @bind-Value="@Dosage" placeholder="Enter dosage"></InputNumber>
            <ValidationMessage For="@(() => MedicationReminderViewModel.Dosage)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
        </div>

        <div class="col-md-4 mb-3">
            <label for="startDate">Start Date</label>
            <InputDate TValue="DateOnly" id="startDate" class="form-control" @bind-Value="StartDate" />
            <ValidationMessage For="@(() => MedicationReminderViewModel.StartDate)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="endDate">End Date</label>
            <InputDate TValue="DateOnly" id="endDate" class="form-control" @bind-Value="EndDate" />
            <ValidationMessage For="@(() => MedicationReminderViewModel.EndDate)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="dayInterval">Day Interval</label>
            <InputNumber id="dayInterval" class="form-control" @bind-Value="@DayInterval" step="0.5" min="0" max="24"> </InputNumber>
            <ValidationMessage For="@(() => MedicationReminderViewModel.DayInterval)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
        </div>
        <div class="col-md-4 mb-3">
            <label for="hour">Hour</label>
            <InputNumber id="hour" class="form-control" @bind-Value="@Hour" step="0.5" min="0" max="24"> </InputNumber>
            <ValidationMessage For="@(() => MedicationReminderViewModel.HourList)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Add medication reminder</button>
    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
   [Inject]
   private IJSRuntime JSRuntime { get; set; }
    [Inject]
    public IMedicationDataService MedicationDataService { get; set; }
    [Inject]
    public IMedicationReminderDataService MedicationReminderDataService { get; set; }

    public List<MedicationViewModel> Medications { get; set; } = new();
    private int selectedMedicationIndex = -1;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

	public MedicationReminderViewModel MedicationReminderViewModel { get; set; } = new MedicationReminderViewModel();

    public float Dosage { get; set; } = 0f;
    public float DayInterval { get; set; } = 0f;
    public float Hour { get; set; } = 0f;
    DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);

	public string Message { get; set; }
}

@functions {
    protected override async Task OnInitializedAsync()
    {
        Medications = (await MedicationDataService.GetMedicationsAsync()).ToList();
        // await JSRuntime.InvokeVoidAsync("console.log", Medications);
    }
    private async Task HandleValidSubmit()
    {
        MedicationReminderViewModel.HourList = new() { Hour };
        MedicationReminderViewModel.Dosage = (uint)Dosage;
        MedicationReminderViewModel.DayInterval = (uint)DayInterval;
        MedicationReminderViewModel.MedicationId = Medications[selectedMedicationIndex].Id;
        MedicationReminderViewModel.StartDate = new DateTime(StartDate, TimeOnly.MinValue, DateTimeKind.Utc);
        MedicationReminderViewModel.EndDate = new DateTime(EndDate, TimeOnly.MinValue, DateTimeKind.Utc);


		var result = await MedicationReminderDataService.CreateMedicationReminderAsync(MedicationReminderViewModel);
		if (result.IsSuccess)
		{
			Message = "Medication reminder created successfully";
		}
		else
		{
			Message = result.Message;
			if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
			{
				Message += result.ValidationErrors;
			}
		}
		// NavigationManager.NavigateTo("/medicationreminderoverview");

	}

	private void Cancel()
	{
		NavigationManager.NavigateTo("/medicoverview");
	}
}
