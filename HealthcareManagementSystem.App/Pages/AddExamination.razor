@page "/addexamination/{Id:Guid}"
@using HealthcareManagementSystem.App.Contracts
@using HealthcareManagementSystem.App.ViewModels

<h3>Make an appointment</h3>
<br/>

@if (Medic == null)
{
	<p><em>Loading...</em></p>
}
else
{
	
    <EditForm Model="@Examination" OnValidSubmit="@HandleValidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary></ValidationSummary>

        <div class="col-md-4 mb-5">
	        <h5>@Medic.FirstName @Medic.LastName</h5>
	        <h6>@Medic.Department</h6>
	        <label for="date">Date:</label>
	        <InputDate TValue="DateOnly" id="date" class="form-control" @bind-Value="Date"/>
	        <ValidationMessage For="@(() => Examination.Date)"/>
	        <div class="valid-tooltip">
		        Looks good!
	        </div>
        </div>

        <button type="submit" class="btn btn-primary">Add medication reminder</button>
    </EditForm>

}

@code {
	[Parameter] public string Id { get; set; }

	[Inject]
	public IMedicDataService MedicDataService { get; set; }
	[Inject]
	public IExaminationDataService ExaminationDataService { get; set; }

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	public MedicViewModel Medic { get; set; }
	public CreateExaminationViewModel Examination { get; set; } = new();

	DateOnly Date { get; set; } = DateOnly.FromDateTime(DateTime.Today);
	public string Message { get; set; }

}

@functions {
	protected override async Task OnInitializedAsync()
	{
		Medic = await MedicDataService.GetMedicByIdAsync(Guid.Parse(Id));
	}

	private async Task HandleValidSubmit()
	{
		Examination.Date = new DateTime(Date, TimeOnly.MinValue, DateTimeKind.Utc);
		Examination.MedicId = Guid.Parse(Id);
		Examination.Department = Medic.Department; 


		var result = await ExaminationDataService.CreateExaminationAsync(Examination);
		if (result.IsSuccess)
		{
			Message = "Medication reminder created successfully";
		}
		else
		{
			Message = result.Message;
			if (!string.IsNullOrWhiteSpace(result.ValidationErrors))
			{
				Message += result.ValidationErrors;
			}
		}

	}


}
