@page "/register"
@using HealthcareManagementSystem.App.ViewModels
@using HealthcareManagementSystem.App.Auth
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IJSRuntime JsRuntime

<h3>Register</h3>


<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="RegisterRequest">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="col-md-4 mb-3">
            <label for="inputFirstName" class="sr-only">FirstName</label>
            <InputText id="inputFirstName" class="form-control" @bind-Value="RegisterRequest.FirstName" autofocus placeholder="FirstName" />
            <ValidationMessage For="@(() => RegisterRequest.FirstName)" />
            <div class="valid-tooltip">
                Looks good!
            </div>
            <div class="col-md-4 mb-3">
                <label for="inputLastName" class="sr-only">LastName</label>
                <InputText id="inputLastName" class="form-control" @bind-Value="RegisterRequest.LastName" autofocus placeholder="LastName" />
                <ValidationMessage For="@(() => RegisterRequest.LastName)" />
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="inputEmail" class="sr-only">Email</label>
                <InputText id="inputEmail" class="form-control" @bind-Value="RegisterRequest.Email" autofocus placeholder="Email" />
                <ValidationMessage For="@(() => RegisterRequest.Email)" />
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="inputUsername" class="sr-only">Username</label>
                <InputText id="inputUsername" class="form-control" @bind-Value="RegisterRequest.Username" autofocus placeholder="Username" />
                <ValidationMessage For="@(() => RegisterRequest.Username)" />
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="inputPassword" class="sr-only">Password</label>
                <InputText id="inputPassword" class="form-control" @bind-Value="RegisterRequest.Password" autofocus placeholder="Password" />
                <ValidationMessage For="@(() => RegisterRequest.Password)" />
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="inputPhoneNumber" class="sr-only">PhoneNumber</label>
                <InputText id="inputPhoneNumber" class="form-control" @bind-Value="RegisterRequest.PhoneNumber" autofocus placeholder="PhoneNumber" />
                <ValidationMessage For="@(() => RegisterRequest.PhoneNumber)" />
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <label for="inputDateOfBirth" class="sr-only">DateOfBirth</label>
                <InputDate TValue="DateOnly" id="inputDateOfBirth" class="form-control" @bind-Value="RegisterDate" autofocus placeholder="Date of Birth"/>
                <ValidationMessage For="@(() => RegisterRequest.DateOfBirth)" />
                <div class="valid-tooltip">
                    Looks good!
                </div>
            </div>
        </div>

    </div>

    <button class="btn btn-lg btn-primary btn-block" type="submit" onclick="OnClickHandler">Register</button>

    <label class="text-danger">@Error</label>
</EditForm>

@code {
    RegisterViewModel RegisterRequest { get; set; } = new RegisterViewModel();
    string? Error { get; set; }
    DateOnly RegisterDate { get; set; }

    async Task OnSubmit()
    {
        Error = null;

        try
        {
            RegisterRequest.DateOfBirth = new DateTime(RegisterDate, TimeOnly.MinValue, DateTimeKind.Utc);
            await authStateProvider.Register(RegisterRequest);
            navigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }
}
